/*
Code by  : Shahid Dhariwala
LinkedIn : https://www.linkedin.com/in/shahiddhariwala/
Twitter  : https://twitter.com/shahiddhariwala
*/

package bitMasking;

public class Bitmasking_Basic
{

	public static void bin(int num)
	{
		// To represent it in Binary String
		System.out.println(Integer.toBinaryString(num));
	}

	public static void main(String[] args)
	{
		int a = 5; // 101
		System.out.println(a);
		bin(a);
		int b = 7; // 111
		System.out.println(b);
		bin(b);
		/*
		 * 5
		 * 101
		 * 7
		 * 111
		 */
		System.out.println("------------AND '&'----------------------");
		/*
		 * 1. '&' Bitwise AND operator
		 * 1&1 =1 , 1&0 = 0 ; its like multplications 1x0 = 0 && 1x1 is 1
		 * 
		 */

		int c = a & b; // 101&111 = 101 i.e 5
		bin(c); // 101
		System.out.println(c);
		/*
		 * ------------AND '&'----------------------
		 * 101
		 * 5
		 * 
		 */
		System.out.println("------------ OR '|' ----------------------");
		/*
		 * 2/ '|' Bitwise OR operator
		 * 
		 * 1 | 1 = 1 ;; 1| 0 = 1 ;; its like adition 1 + 0 = 1 or 1 + 1 = 1
		 */
		c = a | b;
		bin(c);
		System.out.println(c);
		/*
		 * ------------ OR '|' ----------------------
		 * 111
		 * 7
		 */
		System.out.println("------------XOR '^' ----------------------");
		/*
		 * 1^1 = 0
		 * 0^0 = 0
		 * 1 ^ 0 = 1
		 * 0 ^ 1 = 1
		 * 
		 * for same bits it gives 0 and for different it gives 1
		 * 
		 * if we XOR any number with 1 we gets its 1s COmpliment
		 * 
		 * i.e 101^1 = 010
		 */

		c = a ^ b;
		bin(c);
		System.out.println(c);
		/*
		 * if we XOR any number with 1 we gets its 1s COmpliment
		 * and if XOR with 0 we will get original number
		 * i.e 1^1 = 0
		 */
		bin(1 ^ 1);
		bin(0 ^ 1);
		bin(0 ^ 0);
		bin(1 ^ 0);
		/*
		 * ------------XOR '^' ----------------------
		 * 10
		 * 2
		 * 0
		 * 1
		 * 0
		 * 1
		 */
		System.out.println("------------Compliment '~' ----------------------");
		/*
		 * Fliping Every bit
		 */
		bin(~a);
		bin(~b);
		/*
		 * ------------Compliment '~' ----------------------
		 * 11111111111111111111111111111010
		 * 11111111111111111111111111111000
		 */
		System.out.println("------------Left Shift '<<' ----------------------");
		/*
		 * b shift => a<<b == a*Math.pow(2,b);
		 */
		bin(10);
		System.out.println("10 << 2 \n" + (10 << 2));
		bin(10 << 2);

		System.out.println("10 << 1 \n" + (10 << 1));
		bin(10 << 1);

		for (int i = 0; i < 31; i++)
		{
			System.out.printf("1 << %d => %d\n", i, (1 << i));
			bin(1 << i);
		}
		/*
		 * ------------Left Shift '<<' ----------------------
		 * 1010
		 * 10 << 2
		 * 40
		 * 101000
		 * 10 << 1
		 * 20
		 * 10100
		 * 1 << 0 => 1
		 * 1
		 * 1 << 1 => 2
		 * 10
		 * 1 << 2 => 4
		 * 100
		 * 1 << 3 => 8
		 * 1000
		 * 1 << 4 => 16
		 * 10000
		 * 1 << 5 => 32
		 * 100000
		 * 1 << 6 => 64
		 * 1000000
		 * 1 << 7 => 128
		 * 10000000
		 * 1 << 8 => 256
		 * 100000000
		 * 1 << 9 => 512
		 * 1000000000
		 * 1 << 10 => 1024
		 * 10000000000
		 * 1 << 11 => 2048
		 * 100000000000
		 * 1 << 12 => 4096
		 * 1000000000000
		 * 1 << 13 => 8192
		 * 10000000000000
		 * 1 << 14 => 16384
		 * 100000000000000
		 * 1 << 15 => 32768
		 * 1000000000000000
		 * 1 << 16 => 65536
		 * 10000000000000000
		 * 1 << 17 => 131072
		 * 100000000000000000
		 * 1 << 18 => 262144
		 * 1000000000000000000
		 * 1 << 19 => 524288
		 * 10000000000000000000
		 * 1 << 20 => 1048576
		 * 100000000000000000000
		 * 1 << 21 => 2097152
		 * 1000000000000000000000
		 * 1 << 22 => 4194304
		 * 10000000000000000000000
		 * 1 << 23 => 8388608
		 * 100000000000000000000000
		 * 1 << 24 => 16777216
		 * 1000000000000000000000000
		 * 1 << 25 => 33554432
		 * 10000000000000000000000000
		 * 1 << 26 => 67108864
		 * 100000000000000000000000000
		 * 1 << 27 => 134217728
		 * 1000000000000000000000000000
		 * 1 << 28 => 268435456
		 * 10000000000000000000000000000
		 * 1 << 29 => 536870912
		 * 100000000000000000000000000000
		 * 1 << 30 => 1073741824
		 * 1000000000000000000000000000000
		 */
		System.out.println("------------Right Shift '>>' ----------------------");
		bin(a >> 1); // 10 i.e 2 5/2 = 2
		bin(b >> 1); // 11 i.e 3 7/2 = 3
		// a>>b i.e it Divides 'a' by 2powb
		System.out.println("a>>b i.e it Divides 'a' by 2powb");
		for (int i = 1073741824; i > 0; i = i >> 1)
		{
			//we are dividing i by 2pow1 each time
			System.out.println(i);
			bin(i);
		}
		/*
		 * 
		 * ------------Right Shift '>>' ----------------------
		 * 10
		 * 11
		 * a>>b i.e it Divides 'a' by 2powb
		 * 1073741824
		 * 1000000000000000000000000000000
		 * 536870912
		 * 100000000000000000000000000000
		 * 268435456
		 * 10000000000000000000000000000
		 * 134217728
		 * 1000000000000000000000000000
		 * 67108864
		 * 100000000000000000000000000
		 * 33554432
		 * 10000000000000000000000000
		 * 16777216
		 * 1000000000000000000000000
		 * 8388608
		 * 100000000000000000000000
		 * 4194304
		 * 10000000000000000000000
		 * 2097152
		 * 1000000000000000000000
		 * 1048576
		 * 100000000000000000000
		 * 524288
		 * 10000000000000000000
		 * 262144
		 * 1000000000000000000
		 * 131072
		 * 100000000000000000
		 * 65536
		 * 10000000000000000
		 * 32768
		 * 1000000000000000
		 * 16384
		 * 100000000000000
		 * 8192
		 * 10000000000000
		 * 4096
		 * 1000000000000
		 * 2048
		 * 100000000000
		 * 1024
		 * 10000000000
		 * 512
		 * 1000000000
		 * 256
		 * 100000000
		 * 128
		 * 10000000
		 * 64
		 * 1000000
		 * 32
		 * 100000
		 * 16
		 * 10000
		 * 8
		 * 1000
		 * 4
		 * 100
		 * 2
		 * 10
		 * 1
		 * 1
		 */
	}

}

/* https://github.com/shahiddhariwala */